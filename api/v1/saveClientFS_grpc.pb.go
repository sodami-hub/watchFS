// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GarageClient is the client API for Garage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GarageClient interface {
	Join(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	Cert(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	InitGarage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	UploadFiles(ctx context.Context, in *File, opts ...grpc.CallOption) (*Response, error)
}

type garageClient struct {
	cc grpc.ClientConnInterface
}

func NewGarageClient(cc grpc.ClientConnInterface) GarageClient {
	return &garageClient{cc}
}

func (c *garageClient) Join(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.Garage/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageClient) Cert(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.Garage/Cert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageClient) InitGarage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.Garage/InitGarage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageClient) UploadFiles(ctx context.Context, in *File, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.Garage/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GarageServer is the server API for Garage service.
// All implementations must embed UnimplementedGarageServer
// for forward compatibility
type GarageServer interface {
	Join(context.Context, *UserInfo) (*Response, error)
	Cert(context.Context, *UserInfo) (*Response, error)
	InitGarage(context.Context, *UserInfo) (*Response, error)
	UploadFiles(context.Context, *File) (*Response, error)
	mustEmbedUnimplementedGarageServer()
}

// UnimplementedGarageServer must be embedded to have forward compatible implementations.
type UnimplementedGarageServer struct {
}

func (UnimplementedGarageServer) Join(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedGarageServer) Cert(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cert not implemented")
}
func (UnimplementedGarageServer) InitGarage(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitGarage not implemented")
}
func (UnimplementedGarageServer) UploadFiles(context.Context, *File) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedGarageServer) mustEmbedUnimplementedGarageServer() {}

// UnsafeGarageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GarageServer will
// result in compilation errors.
type UnsafeGarageServer interface {
	mustEmbedUnimplementedGarageServer()
}

func RegisterGarageServer(s *grpc.Server, srv GarageServer) {
	s.RegisterService(&_Garage_serviceDesc, srv)
}

func _Garage_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.Garage/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).Join(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Garage_Cert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).Cert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.Garage/Cert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).Cert(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Garage_InitGarage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).InitGarage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.Garage/InitGarage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).InitGarage(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Garage_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.Garage/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServer).UploadFiles(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

var _Garage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientfs.v1.Garage",
	HandlerType: (*GarageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Garage_Join_Handler,
		},
		{
			MethodName: "Cert",
			Handler:    _Garage_Cert_Handler,
		},
		{
			MethodName: "InitGarage",
			Handler:    _Garage_InitGarage_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _Garage_UploadFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/saveClientFS.proto",
}
