// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GarageServiceClient is the client API for GarageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GarageServiceClient interface {
	Join(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	Cert(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	InitGarage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error)
	UploadFiles(ctx context.Context, in *Files, opts ...grpc.CallOption) (*Response, error)
}

type garageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGarageServiceClient(cc grpc.ClientConnInterface) GarageServiceClient {
	return &garageServiceClient{cc}
}

func (c *garageServiceClient) Join(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.GarageService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageServiceClient) Cert(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.GarageService/Cert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageServiceClient) InitGarage(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.GarageService/InitGarage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *garageServiceClient) UploadFiles(ctx context.Context, in *Files, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/clientfs.v1.GarageService/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GarageServiceServer is the server API for GarageService service.
// All implementations must embed UnimplementedGarageServiceServer
// for forward compatibility
type GarageServiceServer interface {
	Join(context.Context, *UserInfo) (*Response, error)
	Cert(context.Context, *UserInfo) (*Response, error)
	InitGarage(context.Context, *UserInfo) (*Response, error)
	UploadFiles(context.Context, *Files) (*Response, error)
	mustEmbedUnimplementedGarageServiceServer()
}

// UnimplementedGarageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGarageServiceServer struct {
}

func (UnimplementedGarageServiceServer) Join(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedGarageServiceServer) Cert(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cert not implemented")
}
func (UnimplementedGarageServiceServer) InitGarage(context.Context, *UserInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitGarage not implemented")
}
func (UnimplementedGarageServiceServer) UploadFiles(context.Context, *Files) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedGarageServiceServer) mustEmbedUnimplementedGarageServiceServer() {}

// UnsafeGarageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GarageServiceServer will
// result in compilation errors.
type UnsafeGarageServiceServer interface {
	mustEmbedUnimplementedGarageServiceServer()
}

func RegisterGarageServiceServer(s *grpc.Server, srv GarageServiceServer) {
	s.RegisterService(&_GarageService_serviceDesc, srv)
}

func _GarageService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.GarageService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServiceServer).Join(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GarageService_Cert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServiceServer).Cert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.GarageService/Cert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServiceServer).Cert(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GarageService_InitGarage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServiceServer).InitGarage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.GarageService/InitGarage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServiceServer).InitGarage(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GarageService_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Files)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarageServiceServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientfs.v1.GarageService/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarageServiceServer).UploadFiles(ctx, req.(*Files))
	}
	return interceptor(ctx, in, info, handler)
}

var _GarageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clientfs.v1.GarageService",
	HandlerType: (*GarageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _GarageService_Join_Handler,
		},
		{
			MethodName: "Cert",
			Handler:    _GarageService_Cert_Handler,
		},
		{
			MethodName: "InitGarage",
			Handler:    _GarageService_InitGarage_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _GarageService_UploadFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/saveClientFS.proto",
}
